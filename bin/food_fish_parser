#!/usr/bin/env ruby
#
# Parser for food fish lists.
#
require 'optparse'

$:.push(File.expand_path(File.dirname(__FILE__) + "/../lib"))
require 'food_fish_parser'

begin
  require 'pry'
  def pp(o, color: true)
    if color
      Pry::ColorPrinter.pp(o)
    else
      puts(o.inspect)
    end
  end
rescue LoadError
  # fallback without color printing
  def pp(o, color: nil)
    puts(o.inspect)
  end
end

def colorize(color, s)
  if color
    "\e[#{color}m#{s}\e[0;22m"
  else
    s
  end
end

def parse_single(s, parsed=nil, parser:, verbosity: 1, print: nil, escape: false, color: false, anywhere: false)
  parsed ||= parser.parse(s, anywhere: anywhere)

  return unless print.nil? || (parsed && print == :parsed) || (!parsed && print == :noresult)

  puts colorize(color && "0;32", escape ? s.gsub("\n", "\\n") : s) if verbosity > 0

  if parsed
    puts(parsed.inspect) if verbosity > 1
    pp(parsed.to_a, color: color) if verbosity > 0
    return true
  else
    puts "(no result: #{parser.parser.failure_reason})" if verbosity > 0
    return false
  end
end

def parse_file(path, parser:, verbosity: 1, print: nil, escape: false, color: false, anywhere: false)
  count_parsed = count_noresult = 0
  File.foreach(path) do |line|
    next if line =~ /^#/    # comment
    next if line =~ /^\s*$/ # empty line

    line = line.gsub('\\n', "\n").strip
    parsed = parser.parse(line, anywhere: anywhere)
    count_parsed += 1 if parsed
    count_noresult += 1 unless parsed

    parse_single(line, parsed, parser: parser, verbosity: verbosity, print: print, escape: escape, color: color)
  end

  pct_parsed   = 100.0 * count_parsed / (count_parsed + count_noresult)
  pct_noresult = 100.0 * count_noresult / (count_parsed + count_noresult)
  puts "parsed #{colorize(color && "1;32", count_parsed)} (#{pct_parsed.round(1)}%), no result #{colorize(color && "1;31", count_noresult)} (#{pct_noresult.round(1)}%)"
  return count_noresult
end

verbosity = 1
files = []
strings = []
print = nil
parser_name = :strict
anywhere = false
escape = false
color = true
PARSERS = {
  strict: FoodFishParser::Strict::Parser,
  flat:   FoodFishParser::Flat::Parser
}
OptionParser.new do |opts|
  opts.banner = <<-EOF.gsub(/^    /, '')
    Usage: #{$0} [options] --file|-f <filename>
           #{$0} [options] --string|-s <text>

  EOF

  opts.on("-f", "--file FILE", "Parse all lines of the file as fish detail text.") {|f| files << f }
  opts.on("-s", "--string TEXT", "Parse specified fish detail text.") {|s| strings << s }

  opts.on("-q", "--[no-]quiet", "Only show summary.") {|q| verbosity = q ? 0 : 1 }
  opts.on("-p", "--parsed", "Only show lines that were successfully parsed.") {|p| print = :parsed }
  opts.on("-n", "--noresult", "Only show lines that had no result.") {|p| print = :noresult }
  opts.on("-r", "--parser PARSER", "Use specific parser (#{PARSERS.keys.join(", ")}).") {|p| parser_name = p&.downcase&.to_sym }
  opts.on("-a", "--[no-]anywhere", "Search for fish details anywhere in the text (only strict parser).") {|a| anywhere = !!a }
  opts.on("-e", "--[no-]escape", "Escape newlines") {|e| escape = !!e }
  opts.on("-c", "--[no-]color", "Use color") {|e| color = !!e }
  opts.on("-v", "--[no-]verbose", "Show more data (parsed tree).") {|v| verbosity = v ? 2 : 1 }
  opts.on(      "--version", "Show program version.") do
    puts("food_fish_parser v#{FoodFishParser::VERSION}")
    exit
  end
  opts.on("-h", "--help", "Show this help") do
    puts(opts)
    exit
  end
end.parse!

if strings.any? || files.any?
  unless parser = PARSERS[parser_name]&.new
    STDERR.puts("Please specify one of the known parsers: #{PARSERS.keys.join(", ")}.")
    exit(1)
  end
  success = true
  strings.each {|s| success &= parse_single(s, parser: parser, verbosity: verbosity, print: print, escape: escape, color: color, anywhere: anywhere) }
  files.each   {|f| success &= parse_file(f, parser: parser, verbosity: verbosity, print: print, escape: escape, color: color, anywhere: anywhere) }
  success or exit(1)
else
  STDERR.puts("Please specify one or more --file or --string arguments (see --help).")
end
