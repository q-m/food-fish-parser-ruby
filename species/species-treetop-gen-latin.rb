#!/usr/bin/env ruby
#
# Generate treetop fish species grammar from latin species names on standard input.
#
# We use this as a poor man's named entity recognition (NER), to reduce size the first
# and second name are separated and included separately.
#
# Note that the order of items is relevant, because Treetop is a greedy non-backtracking
# parser. Put the longest item first, so that we get +'groene' / 'groen'+ instead of the
# other way around.
#
require 'set'
require 'date'

names_first = Set.new
names_second = Set.new

STDIN.each_line(chomp: true) do |line|
  line.gsub!(/\s*\(.*?\)/, '') # remove text between brackets
  line.gsub!(/\s*#.*\z/, '')   # remove comments
  next if line.strip == ''
  first, second = line.strip.split(/\s+/, 2)
  names_first.add(first.downcase)
  names_second.add(second.downcase) if second
end

# include "species pluralis", with and without dot
names_second.add('spp')
names_second.add('spp.')

puts <<EOF
# autogenerated by #{File.basename(__FILE__)} on #{Date.today}
module FoodFishParser::Grammar
  grammar FishNameLatin
    include Common

    rule fish_name_latin
      fish_name_latin_first ( ws+ fish_name_latin_second )?
      <FishNameLatinNode>
    end

    rule fish_name_latin_first
      #{names_first.sort.reverse.map {|s| "'#{s}'i" }.join(" / ")}
    end

    rule fish_name_latin_second
      #{names_second.sort.reverse.map {|s| "'#{s}'i" }.join(" / ")}
    end
  end
end
EOF
